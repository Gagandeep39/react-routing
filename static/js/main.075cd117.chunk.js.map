{"version":3,"sources":["components/Home/HomeComponent.js","components/Contact/ContactComponent.js","components/Projects/ProjectsComponent.js","components/Services/ServicesComponent.js","components/Header/HeaderComponent.js","components/RootComponent/RootComponent.js","App.js","serviceWorker.js","index.js"],"names":["HomeComponent","props","className","class","ContactComponent","Component","ProjectsComponent","ServicesComponent","HeaderComponent","exact","activeClassName","to","RootComponent","this","children","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAWeA,G,kBARO,SAACC,GACrB,OACE,yBAAMC,UAAU,qCACd,yCAAc,0BAAMC,MAAM,uBAAZ,Y,4BCQLC,E,uKAVX,OACE,yBAAKF,UAAU,qCACb,yCACY,0BAAMC,MAAM,uBAAZ,iB,GALWE,aCWhBC,E,uKARX,OACE,yBAAKJ,UAAU,qCACb,yCAAc,0BAAMC,MAAM,uBAAZ,kB,GAJUE,aCYjBE,E,uKAVX,OACE,yBAAKL,UAAU,qCACb,yCACY,0BAAMA,UAAU,uBAAhB,kB,GALYG,a,eC+BjBG,EA7BS,SAACP,GACvB,OACE,yBAAKC,UAAU,kDACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASO,OAAK,EAACC,gBAAgB,SAAUR,UAAU,WAAWS,GAAG,KAAjE,SAIF,wBAAIR,MAAM,YACR,kBAAC,IAAD,CAASO,gBAAgB,SAASR,UAAU,WAAWS,GAAG,aAA1D,aAIF,wBAAIR,MAAM,YACR,kBAAC,IAAD,CAASO,gBAAgB,SAAUR,UAAU,WAAWS,GAAG,aAA3D,aAIF,wBAAIR,MAAM,YACR,kBAAC,IAAD,CAAUO,gBAAgB,SAAUR,UAAU,WAAWS,GAAG,aAA5D,gBCrBWC,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKV,UAAU,OACb,6BACGW,KAAKZ,MAAMa,gB,GAPmBT,aCqB5BU,MAff,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAON,OAAK,EAACO,KAAM,IAAKC,UAAWjB,IACnC,kBAAC,IAAD,CAAOgB,KAAM,YAAaC,UAAWb,IACrC,kBAAC,IAAD,CAAOY,KAAM,YAAaC,UAAWX,IACrC,kBAAC,IAAD,CAAOU,KAAM,QAASC,UAAWjB,IACjC,kBAAC,IAAD,CAAOgB,KAAM,YAAaC,UAAWV,OCPzBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.075cd117.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst HomeComponent = (props) => {\n  return (\n    <div  className='col d-flex justify-content-center'>\n      <h1>You chose <span class=\"badge badge-primary\">Home</span></h1>\n    </div>\n  );\n}\n\nexport default HomeComponent;\n","import React, { Component } from 'react';\n\nclass ContactComponent extends Component {\n  render() {\n    return (\n      <div className='col d-flex justify-content-center'>\n        <h1>\n          You chose <span class='badge badge-primary'>Contact</span>\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default ContactComponent;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass ProjectsComponent extends Component {\n  render() {\n    return (\n      <div className='col d-flex justify-content-center'>\n        <h1>You chose <span class='badge badge-primary'>Projects</span></h1>\n      </div>\n    );\n  }\n}\n\nexport default ProjectsComponent;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass ServicesComponent extends Component {\n  render() {\n    return (\n      <div className='col d-flex justify-content-center'>\n        <h1>\n          You chose <span className='badge badge-primary'>Services</span>\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default ServicesComponent;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../../App.css';\nimport { NavLink } from \"react-router-dom\";\n\nconst HeaderComponent = (props) => {\n  return (\n    <nav className='navbar navbar-expand-sm bg-primary navbar-dark'>\n      <ul className='navbar-nav'>\n        <li className='nav-item'>\n          <NavLink exact activeClassName='active'  className='nav-link' to='/'>\n            Home\n          </NavLink >\n        </li>\n        <li class='nav-item'>\n          <NavLink activeClassName='active' className='nav-link' to='/projects'>\n            Projects\n          </NavLink >\n        </li>\n        <li class='nav-item'>\n          <NavLink activeClassName='active'  className='nav-link' to='/services'>\n            Services\n          </NavLink >\n        </li>\n        <li class='nav-item'>\n          <NavLink  activeClassName='active'  className='nav-link' to='/contacts'>\n            Contacts\n          </NavLink >\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default HeaderComponent;\n","import React, { Component } from 'react';\nimport HeaderComponent from '../Header/HeaderComponent';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class RootComponent extends Component {\n  render() {\n    return (\n      <div>\n        <HeaderComponent />\n        <div className='row'>\n          <div>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport HomeComponent from './components/Home/HomeComponent';\nimport ContactComponent from './components/Contact/ContactComponent';\nimport ProjectsComponent from './components/Projects/ProjectsComponent';\nimport ServicesComponent from './components/Services/ServicesComponent';\nimport { Route, Switch } from 'react-router-dom';\nimport HeaderComponent from './components/Header/HeaderComponent';\nimport RootComponent from './components/RootComponent/RootComponent';\n\nfunction App() {\n  return (\n    <div>\n      <RootComponent></RootComponent>\n      <Switch>\n        <Route exact path={'/'} component={HomeComponent} />\n        <Route path={'/contacts'} component={ContactComponent} />\n        <Route path={'/projects'} component={ProjectsComponent} />\n        <Route path={'/home'} component={HomeComponent} />\n        <Route path={'/services'} component={ServicesComponent} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter >\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}